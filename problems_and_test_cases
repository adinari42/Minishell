/***************
not working:
****************/
signals need to work in heredoc the rest we can ignore, this is important
ctrl-C in a prompt after you wrote some stuff should display a new line with a new prompt. exit code must be 1<<<<<<<<<<<<<<<<<<<<<<<!!
ctrl-C after running a blocking command like cat without arguments or grep “something“ , exit code must be 130<<<<<<<<<<<<<<<<<<<<<<<!!
Try ctrl-\ after running a blocking command like cat without arguments or grep “something“, exit code must be 131<<<<<<<<<<<<<<<<<<<<!!!!!
many many leaks
any command with a pipe also seems to leak
dprintf is a forbidden function
perror is a forbidden function
""							(should output "command not found")
"" | "" | "" ""				(doesn't crash, but bash outputs "command not found", minishell doesn't output anything)
none of the builtins properly handle exit codes, they need to go into $?
eououe > 			('> at the end of the line should throw a parse error')
oeuoeu >>			('>> at the end of the line should throw a parse error')
oeuoeueo << 	(should throw a syntax error)

/***************
to check:
****************/
minishell sometimes 'hangs' and does not display the next prompt after input. Seems to happen after an unclose quotes error, but I'm not sure.
occasional segfault on starting - something in pipes.c when elements get deleted?
check if heredoc is still working
clean up the Makefile, make sure everything compiles when brew is not installed
go through the evaluation sheet again

/***************
working atm:
****************/
exit code of commadns like *cat outfile | grep ssss* that return nothing is now 1
cat main.c
echo foo$USER
export foo=3			- still ok
echo "foo" > bar
< infile cat
< infile | cat
cat infile | cat			(requires me to hit enter to get the prompt back. same for every command with a pipe, I think?)
echo "foo" | echo "bar"
echo "'$USER'"				(should output adinari or slakner, but it just outputs a single ' (single quote))
echo '"$USER"'				(should output "$USER")
echo "foo"   "foo"
echo lllllll          kkkkkkkk
echo "'"
ctrl-\ in a prompt after you wrote some stuff (should not do anything : pressing should not make cursor jump to beginning of prompt line)
echo $foo					(segfaults)
[input of spaces only]
echo $L						(outputs the value of $LaunchInstanceID, the first variable starting with 'L')
exit 7 :    exit does not exit with the exit code given as argument, using echo $? after exiting must show 7
exit aaasdasdasdas : must exit with 255 failure code , and print “minishell: exit: asdasdasdas: numeric argument required”
echo "foo" |||				(segfaults)
|||							(segfaults)
|							(does not throw an error)
| cat						(segfaults)
cat infile | cat			(requires me to hit enter to get the prompt back. Stays this way until minishell is closed. same for every command with a pipe, I think?)
empty input
spaces only as input
quitting minishell with no input at all
export a=1 | cat 			(seems to behave exactly like bash,but makes the minishell behave oddly after execution until you hit Ctrl-C, I think some process is not terminating)
env | grep USER
echo "foo" | grep foo
echo $?						(does not output '0' if it is the first command being executed, instead outputs some random value)
echo $?						(leaks)

'Minishell$ env | grep HOME=/
grep: /: Is a directory '

echo $USER'$USER'$USER		(outputs an extra space that shouldn't be there)

grep -Hirn "parse error" .	(quotes problem, outputs lines that don't contain parse error)
Try 'ctrl-C' after running a blocking command like cat without arguments or grep “something“. : looks good, but exit code is not 130
exit code of 'Ctrl-\' after running a blocking command like cat should be 131grep -Hirn "parse error" .	(quotes problem, outputs lines that don't contain parse error)
